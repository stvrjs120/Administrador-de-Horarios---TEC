/**
 * Classes Package
 */
package pkgClases;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;


public class clsPracticalClassroom extends clsClassroom {

	/**
	 * @uml.property  name="lstEquipment"
	 * @uml.associationEnd  multiplicity="(0 -1)" inverse="clsPracticalClassroom:pkgClases.clsEquipment"
	 * @uml.association  name="lstEquipment"
	 */
	private Collection lstEquipment;

	/**
	 * Getter of the property <tt>lstEquipment</tt>
	 * @return  Returns the lstEquipment.
	 * @uml.property  name="lstEquipment"
	 */
	public Collection getLstEquipment() {
		return lstEquipment;
	}

	/**
	 * @uml.property  name="EquipmentAmount"
	 */
	private int equipmentAmount;

	/**
	 * Getter of the property <tt>EquipmentAmount</tt>
	 * @return  Returns the equipmentAmount.
	 * @uml.property  name="EquipmentAmount"
	 */
	public int getEquipmentAmount() {
		return equipmentAmount;
	}

	/**
	 * Setter of the property <tt>EquipmentAmount</tt>
	 * @param EquipmentAmount  The equipmentAmount to set.
	 * @uml.property  name="EquipmentAmount"
	 */
	public void setEquipmentAmount(int equipmentAmount) {
		this.equipmentAmount = equipmentAmount;
	}
	
	public clsPracticalClassroom(int pCapacity, String pClassroomName, int pClassroomNumber, String pLocation){
		super(pCapacity, pClassroomName, pClassroomNumber, pLocation);
	}

	/**
	 * Returns an iterator over the elements in this collection. 
	 * @return  an <tt>Iterator</tt> over the elements in this collection
	 * @see java.util.Collection#iterator()
	 * @uml.property  name="lstEquipment"
	 */
	public Iterator lstEquipmentIterator() {
		return lstEquipment.iterator();
	}

	/**
	 * Returns <tt>true</tt> if this collection contains no elements.
	 * @return  <tt>true</tt> if this collection contains no elements
	 * @see java.util.Collection#isEmpty()
	 * @uml.property  name="lstEquipment"
	 */
	public boolean isLstEquipmentEmpty() {
		return lstEquipment.isEmpty();
	}

	/**
	 * Returns <tt>true</tt> if this collection contains the specified element. 
	 * @param element  whose presence in this collection is to be tested.
	 * @see java.util.Collection#contains(Object)
	 * @uml.property  name="lstEquipment"
	 */
	public boolean containsLstEquipment(clsEquipment clsEquipment) {
		return lstEquipment.contains(clsEquipment);
	}

	/**
	 * Returns <tt>true</tt> if this collection contains all of the elements in the specified collection.
	 * @param elements  collection to be checked for containment in this collection.
	 * @see java.util.Collection#containsAll(Collection)
	 * @uml.property  name="lstEquipment"
	 */
	public boolean containsAllLstEquipment(Collection lstEquipment) {
		return this.lstEquipment.containsAll(lstEquipment);
	}

	/**
	 * Returns the number of elements in this collection.
	 * @return  the number of elements in this collection
	 * @see java.util.Collection#size()
	 * @uml.property  name="lstEquipment"
	 */
	public int lstEquipmentSize() {
		return lstEquipment.size();
	}

	/**
	 * Returns all elements of this collection in an array.
	 * @return  an array containing all of the elements in this collection
	 * @see java.util.Collection#toArray()
	 * @uml.property  name="lstEquipment"
	 */
	public clsEquipment[] lstEquipmentToArray() {
		return (clsEquipment[]) lstEquipment
				.toArray(new clsEquipment[lstEquipment.size()]);
	}

	/**
	 * Returns an array containing all of the elements in this collection;  the runtime type of the returned array is that of the specified array.
	 * @param a  the array into which the elements of this collection are to be stored.
	 * @return  an array containing all of the elements in this collection
	 * @see java.util.Collection#toArray(Object[])
	 * @uml.property  name="lstEquipment"
	 */
	public clsEquipment[] lstEquipmentToArray(clsEquipment[] lstEquipment) {
		return (clsEquipment[]) this.lstEquipment.toArray(lstEquipment);
	}

	/**
	 * Ensures that this collection contains the specified element (optional operation). 
	 * @param element  whose presence in this collection is to be ensured.
	 * @see java.util.Collection#add(Object)
	 * @uml.property  name="lstEquipment"
	 */
	public boolean addLstEquipment(clsEquipment clsEquipment) {
		return lstEquipment.add(clsEquipment);
	}

	/**
	 * Setter of the property <tt>lstEquipment</tt>
	 * @param lstEquipment  the lstEquipment to set.
	 * @uml.property  name="lstEquipment"
	 */
	public void setLstEquipment(Collection lstEquipment) {
		this.lstEquipment = lstEquipment;
	}

	/**
	 * Removes a single instance of the specified element from this collection, if it is present (optional operation).
	 * @param element  to be removed from this collection, if present.
	 * @see java.util.Collection#add(Object)
	 * @uml.property  name="lstEquipment"
	 */
	public boolean removeLstEquipment(clsEquipment clsEquipment) {
		return lstEquipment.remove(clsEquipment);
	}

	/**
	 * Removes all of the elements from this collection (optional operation).
	 * @see java.util.Collection#clear()
	 * @uml.property  name="lstEquipment"
	 */
	public void clearLstEquipment() {
		lstEquipment.clear();
	}
}
